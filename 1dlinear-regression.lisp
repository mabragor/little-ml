;;;; Part of little-acl

(in-package #:little-ml)

(defun normalize-training-input (xs ys)
  ;; for now just do nothing
  (if (equal (length xs) (length ys))
      (values xs ys (length xs))
      (error "Training inputs and output should have the same length.")))

(defun make-cost-function (xs &optional ys)
  (multiple-value-bind (xs ys len) (normalize-training-input xs ys)
    (let ((avg-x (/ (iter (for x in-vector xs)
			  (summing x))
		    len))
	  (avg-y (/ (iter (for y in-vector ys)
			  (summing y))
		    len))
	  (avg-xy (/ (iter (for y in-vector ys)
			   (for x in-vector xs)
			   (summing (* x y)))
		     len))
	  (avg-x2 (/ (iter (for x in-vector xs)
			   (summing (expt x 2)))
		     len))
	  (avg-y2 (/ (iter (for y in-vector ys)
			   (summing (expt y 2)))
		     len)))
      ;; (format t "avg-x ~a avg-y ~a avg-xy ~a avg-x2 ~a avg-y2 ~a~%" avg-x avg-y avg-xy avg-x2 avg-y2)
      (values (lambda (theta0 theta1)
		(+ (/ (expt theta0 2) 2)
		   (* theta0 theta1 avg-x)
		   (- (* theta0 avg-y))
		   (- (* theta1 avg-xy))
		   (/ (* (expt theta1 2) avg-x2) 2)
		   (/ avg-y2 2)))
	      (lambda (theta0 theta1)
		(+ theta0 (* theta1 avg-x) (- avg-y)))
	      (lambda (theta0 theta1)
		(+ (* theta0 avg-x)
		   (* theta1 avg-x2)
		   (- avg-xy)))))))
	    
