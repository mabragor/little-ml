;;;; This is part of little-ml system, destributed under GPL

(in-package #:little-ml)

(defparameter *inner-width* 40)
(defparameter *inner-height* 30)
(defparameter *out-in-ratio* 1)

(defparameter white-color (make-color :red 65535 :green 65535 :blue 65535))
(defparameter black-color (make-color :red 0 :green 0 :blue 0))
(defparameter *bg-color* white-color)

(defun setup-ratios (window)
  (multiple-value-bind (w h) (drawable-get-size (widget-window window))
    (setf *out-in-ratio* (/ w *inner-width*))
    (setf *inner-height* (/ h *out-in-ratio*))))

(defun prepare-window (window)
  (let* ((gc (graphics-context-new window)))
    (multiple-value-bind (w h) (drawable-get-size window)
      (setf (graphics-context-rgb-bg-color gc) *bg-color*)
      (setf (graphics-context-rgb-fg-color gc) *bg-color*)
      (draw-polygon window gc t (list (make-point :x 0 :y 0)
				      (make-point :x w :y 0)
				      (make-point :x w :y h)
				      (make-point :x 0 :y h))))))

(defun 1d-linear-regression-demo ()
  (within-main-loop
    (let ((window (make-instance 'gtk-window :type :toplevel :app-paintable t))
	  (eventbox (make-instance 'event-box)))
      (container-add window eventbox)
      (connect-signal window "destroy" (lambda (widget)
					 (declare (ignore widget))
					 (leave-gtk-main)))
      (connect-signal window "expose-event"
		      (lambda (widget event)
			(declare (ignore widget event))
			(setup-ratios window)
			(prepare-window (widget-window window))))
      (connect-signal window "configure-event"
		      (lambda (widget event)
			(declare (ignore widget event))
			(setup-ratios window)
			(prepare-window (widget-window window))
			(widget-queue-draw window)))
      ;; (connect-signal eventbox "event"
      ;; 		      (lambda (widget event)
      ;; 			(declare (ignore widget))
      ;; 			(format *standard-output* "imhere~%")
      ;; 			(when (and (eq (event-type event) :button-release)
      ;; 				   (eq (event-button-button event) 1))
      ;; 			  (format *standard-output* "im there~%")
      ;; 			  (if (equal *bg-color* white-color)
      ;; 			      (setf *bg-color* black-color)
      ;; 			      (setf *bg-color* white-color))
      ;; 			  (prepare-window (widget-window window))
      ;; 			  (widget-queue-draw window))))
      (pushnew :button-press-mask (widget-events eventbox))
      (pushnew :key-press-mask (widget-events eventbox))
      (connect-signal eventbox "button-press-event"
		      (lambda (widget event)
			(declare (ignore widget event))
			(format *standard-output* "imhere~%")
			(ignore-errors
			  (progn (format *standard-output* "im there~%")
				 (if (equal *bg-color* white-color)
				     (setf *bg-color* black-color)
				     (setf *bg-color* white-color))
				 (prepare-window (widget-window window))
				 (widget-queue-draw window)))))
      (connect-signal eventbox "key-press-event"
		      (lambda (widget event)
			(declare (ignore widget))
			(format *standard-output* "imhere~%")
			(ignore-errors
			  (let ((c (aref (gdk:event-key-string event) 0)))
			    (case c
			      (#\w (progn (format *standard-output* "im there~%")
					  (if (equal *bg-color* white-color)
					      (setf *bg-color* black-color)
					      (setf *bg-color* white-color))
					  (prepare-window (widget-window window))
					  (widget-queue-draw window))))))))
      ;; (connect-signal window "key-press-event"
      ;; 		      #'gtk-window-propagate-key-event)
      ;; (gtk-main-add-timeout 10 (lambda ()
      ;; 				 (with-muffled-bare-ref-warn
      ;; 				   (collide *objects*)
      ;; 				   (calculate-forces *objects*)
      ;; 				   (move *objects*)
      ;; 				   (erase (widget-window window) *objects*)
      ;; 				   (draw (widget-window window) *objects*)
      ;; 				   t))
      ;; 			    :priority glib:+g-priority-high-idle+)
      (widget-realize eventbox)
      (widget-show window :all t))))
;; (push :pointer-motion-mask (gdk-window-events (widget-window window))))))
